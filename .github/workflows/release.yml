name: Build and Update Release

on:
  push:
    branches:
      - main
    paths-ignore:
      - '.github/**'

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'

      - name: Install pnpm
        run: npm install -g pnpm

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build the project
        run: pnpm build

      - name: List files in dist for debugging
        run: ls -R dist

      - name: Delete and upload release assets
        uses: actions/github-script@v6
        with:
          script: |
            const { Octokit } = require("@octokit/rest");
            const octokit = new Octokit({ auth: process.env.GITHUB_TOKEN });

            async function run() {
              const owner = process.env.GITHUB_REPOSITORY.split('/')[0];
              const repo = process.env.GITHUB_REPOSITORY.split('/')[1];

              // Get the latest release
              const latestRelease = await octokit.repos.getLatestRelease({
                owner,
                repo,
              });

              const releaseId = latestRelease.data.id;

              // List assets
              const assets = await octokit.repos.listReleaseAssets({
                owner,
                repo,
                release_id: releaseId,
              });

              // Delete all assets
              for (const asset of assets.data) {
                await octokit.repos.deleteReleaseAsset({
                  owner,
                  repo,
                  asset_id: asset.id,
                });
              }

              // Upload new assets from dist
              const fs = require('fs');
              const path = 'dist';
              const files = fs.readdirSync(path);

              for (const file of files) {
                if (file !== 'package.json' && file !== 'installer') {
                  const content = fs.readFileSync(`${path}/${file}`);
                  await octokit.repos.uploadReleaseAsset({
                    owner,
                    repo,
                    release_id: releaseId,
                    name: file,
                    data: content,
                  });
                }
              }
            }

            run().catch(err => {
              console.error(err);
              process.exit(1);
            });

        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
